{
	"info": {
		"_postman_id": "f198a1b2-a260-4de7-aefd-bb9a733a7cc6",
		"name": "SportTogether Go",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Get Events",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check if event with id1 is Test\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[0].name).to.eql(\"Test\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check if events count is 4\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.length).to.eql(4);\r",
							"});\r",
							"\r",
							"pm.test(\"Check if events is not empty\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).not.eql(\"null\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{PATH}}/events",
					"host": [
						"{{PATH}}"
					],
					"path": [
						"events"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Event",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check if created event returned\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.id).to.eql(4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{TOKEN}}",
						"type": "default"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\":\"Test\",\r\n    \"date\":\"31-05-23\",\r\n    \"details\":\"aasdadsadas\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{PATH}}/events",
					"host": [
						"{{PATH}}"
					],
					"path": [
						"events"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Event",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check if event returned\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.id).to.eql(1);\r",
							"});\r",
							"\r",
							"pm.test(\"Check if event parameters count is 4\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(Object.keys(jsonData).length).to.eql(4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{PATH}}/events/1",
					"host": [
						"{{PATH}}"
					],
					"path": [
						"events",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Event",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check if event id identical\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.id).to.eql(1);\r",
							"});\r",
							"\r",
							"pm.test(\"Check if event name updated\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(\"Update\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{TOKEN}}",
						"type": "default"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\":\"Update\",\r\n    \"date\":\"13231\",\r\n    \"details\":\"aasdadsadas\"\r\n}"
				},
				"url": {
					"raw": "{{PATH}}/events/1",
					"host": [
						"{{PATH}}"
					],
					"path": [
						"events",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Event",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check if event deleted\", function () {\r",
							"    var response = pm.response.text();\r",
							"    pm.expect(response).to.eql(\"Event with ID 4 is deleted successfully\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check if event not found\",() => {\r",
							"  pm.expect(pm.response.text()).to.include(\"Event not found\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{TOKEN}}",
						"type": "default"
					}
				],
				"url": {
					"raw": "{{PATH}}/events/4",
					"host": [
						"{{PATH}}"
					],
					"path": [
						"events",
						"4"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check if user created\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.token).not.eql(undefined);\r",
							"});\r",
							"\r",
							"pm.test(\"Check if user not exists\",() => {\r",
							"  pm.expect(pm.response.text()).to.include(\"User not found\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check if password incorrect\",() => {\r",
							"  pm.expect(pm.response.text()).to.include(\"Incorrect password\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"mail@ukr.net\",\r\n    \"password\": \"11111111\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{PATH}}/login",
					"host": [
						"{{PATH}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check if user created\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.id).not.eql(undefined);\r",
							"});\r",
							"\r",
							"pm.test(\"Check if user exists\",() => {\r",
							"  pm.expect(pm.response.text()).to.include(\"User already exists\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Viktor\",\r\n    \"email\": \"mail@ukr.net\",\r\n    \"password\": \"11111111\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{PATH}}/register",
					"host": [
						"{{PATH}}"
					],
					"path": [
						"register"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "TOKEN",
			"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6Im1haWxAdWtyLm5ldCIsImV4cCI6MTY4NDMyNzcxOCwiaWQiOjF9.77LCeG8RQpkEQ15lurIWuzezOfMIHMYfk8iXsBYLxHA"
		},
		{
			"key": "PATH",
			"value": "localhost:8080"
		}
	]
}